//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Packages/com.nebby1999.nebula/Runtime/Assets/NebulaConsoleCommand.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Nebula
{
    public partial class @NebulaConsoleCommand: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @NebulaConsoleCommand()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""NebulaConsoleCommand"",
    ""maps"": [
        {
            ""name"": ""Nebula"",
            ""id"": ""900ba87e-7358-49d4-9225-2c9c203f8dbe"",
            ""actions"": [
                {
                    ""name"": ""OpenConsole"",
                    ""type"": ""Button"",
                    ""id"": ""2ba4407b-4870-4959-ad08-162a0d3ec273"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Two Modifiers"",
                    ""id"": ""6222469f-40cf-4e8b-b1be-d5013eb0075d"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenConsole"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier1"",
                    ""id"": ""24878505-2619-4410-95aa-a08edc0d19a3"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier2"",
                    ""id"": ""d0a4b2fd-78ec-46c8-b04a-30c1306ffade"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""c55477c5-ff05-4b8f-81ce-ea559f18cf68"",
                    ""path"": ""<Keyboard>/semicolon"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Nebula
            m_Nebula = asset.FindActionMap("Nebula", throwIfNotFound: true);
            m_Nebula_OpenConsole = m_Nebula.FindAction("OpenConsole", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Nebula
        private readonly InputActionMap m_Nebula;
        private List<INebulaActions> m_NebulaActionsCallbackInterfaces = new List<INebulaActions>();
        private readonly InputAction m_Nebula_OpenConsole;
        public struct NebulaActions
        {
            private @NebulaConsoleCommand m_Wrapper;
            public NebulaActions(@NebulaConsoleCommand wrapper) { m_Wrapper = wrapper; }
            public InputAction @OpenConsole => m_Wrapper.m_Nebula_OpenConsole;
            public InputActionMap Get() { return m_Wrapper.m_Nebula; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NebulaActions set) { return set.Get(); }
            public void AddCallbacks(INebulaActions instance)
            {
                if (instance == null || m_Wrapper.m_NebulaActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_NebulaActionsCallbackInterfaces.Add(instance);
                @OpenConsole.started += instance.OnOpenConsole;
                @OpenConsole.performed += instance.OnOpenConsole;
                @OpenConsole.canceled += instance.OnOpenConsole;
            }

            private void UnregisterCallbacks(INebulaActions instance)
            {
                @OpenConsole.started -= instance.OnOpenConsole;
                @OpenConsole.performed -= instance.OnOpenConsole;
                @OpenConsole.canceled -= instance.OnOpenConsole;
            }

            public void RemoveCallbacks(INebulaActions instance)
            {
                if (m_Wrapper.m_NebulaActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(INebulaActions instance)
            {
                foreach (var item in m_Wrapper.m_NebulaActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_NebulaActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public NebulaActions @Nebula => new NebulaActions(this);
        public interface INebulaActions
        {
            void OnOpenConsole(InputAction.CallbackContext context);
        }
    }
}
