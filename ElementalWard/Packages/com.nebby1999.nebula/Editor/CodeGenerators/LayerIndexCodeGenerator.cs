using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEditorInternal;
using UnityEngine;

namespace Nebula.Editor.CodeGenerators
{
    public static class LayerIndexCodeGenerator
    {
        private static Writer WriteCode(NebulaSettings.LayerIndexStructData.CommonMask[] commonMaskSelector, string filePath, string nameSpace)
        {
            var fileName = Path.GetFileNameWithoutExtension(filePath);
            var structName = CSharpCodeHelpers.MakeIdentifier(fileName);

            var writer = new Writer()
            {
                buffer = new StringBuilder()
            };

            writer.WriteLine(CSharpCodeHelpers.MakeAutoGeneratedCodeHeader(
                "com.nebby1999.nebula:LayerIndexCodeGenerator", "1.0.0", "Project Settings"));

            //usings
            writer.WriteLine("using System;");
            writer.WriteLine("using UnityEngine;");

            var haveNamespace = !nameSpace.IsNullOrWhiteSpace();
            if (haveNamespace)
            {
                writer.WriteLine($"namespace {nameSpace}");
                writer.BeginBlock();
            }

            //Class declaration
            writer.WriteLine($"public struct {structName}");
            writer.BeginBlock();

            if (commonMaskSelector.Length > 0)
                WriteCommonMasks(writer, commonMaskSelector);

            writer.WriteLine("public int IntVal { get => _intVal; private set => _intVal = value; }");
            writer.WriteLine("private int _intVal;");
            writer.WriteLine("public LayerMask Mask => (IntVal >= 0) ? (1 << IntVal) : IntVal;");
            writer.WriteLine("public LayerMask CollisionMask => _collisionMasks[IntVal];");
            writer.WriteLine("private static uint _assignedLayerMask;");
            writer.WriteLine("public static readonly LayerIndex invalidLayer = new LayerIndex(-1);");

            //Write project layers
            foreach (string layerName in InternalEditorUtility.layers)
            {
                var identifier = CSharpCodeHelpers.MakeIdentifierCamelCase(layerName);
                if (identifier == "default")
                    identifier = "@default";
                writer.WriteLine($"public static readonly LayerIndex {identifier} = GetLayerIndex(\"{layerName}\");");
            }
            writer.WriteLine("private static readonly LayerMask[] _collisionMasks = CalcCollisionMasks();");

            //Get layer index
            writer.WriteLine("private static LayerIndex GetLayerIndex(string layerName)");
            writer.BeginBlock();
            writer.WriteLine("LayerIndex layerIndex = default(LayerIndex);");
            writer.WriteLine("layerIndex._intVal = LayerMask.NameToLayer(layerName);");
            writer.WriteLine("LayerIndex result = layerIndex;");
            writer.WriteLine("if (result.IntVal == invalidLayer.IntVal)");
            writer.BeginBlock();
            writer.WriteLine("Debug.LogErrorFormat(\"Layer \\\"{0}\\\" is not defined in this project's \\\"Tags and Layers\\\" settings.\", layerName);");
            writer.EndBlock();
            writer.WriteLine("else");
            writer.BeginBlock();
            writer.WriteLine("_assignedLayerMask |= (uint)(1 << result.IntVal);");
            writer.EndBlock();
            writer.WriteLine("return layerIndex;");
            writer.EndBlock();

            //Calc Collision Masks
            writer.WriteLine("private static LayerMask[] CalcCollisionMasks()");
            writer.BeginBlock();
            writer.WriteLine("LayerMask[] array = new LayerMask[32];");
            writer.WriteLine("for (int i = 0; i < 32; i++)");
            writer.BeginBlock();
            writer.WriteLine("LayerMask layerMask = default(LayerMask);");
            writer.WriteLine("for (int j = 0; j < 32; j++)");
            writer.BeginBlock();
            writer.WriteLine("if (!Physics.GetIgnoreLayerCollision(i, j))");
            writer.BeginBlock();
            writer.WriteLine("layerMask = (int)layerMask | (i << j);");
            writer.EndBlock();
            writer.EndBlock();
            writer.WriteLine("array[i] = layerMask;");
            writer.EndBlock();
            writer.WriteLine("return array;");
            writer.EndBlock();

            //constructor
            writer.WriteLine($"private {structName}(int val)");
            writer.BeginBlock();
            writer.WriteLine("_intVal = val;");
            writer.EndBlock();

            //end class
            writer.EndBlock();

            if (haveNamespace)
                writer.EndBlock();

            return writer;
        }

        private static void WriteCommonMasks(Writer writer, NebulaSettings.LayerIndexStructData.CommonMask[] commonMasks)
        {
            writer.WriteLine("public static class CommonMasks");
            writer.BeginBlock();
            for(int i = 0; i < commonMasks.Length; i++)
            {
                var commonMask = commonMasks[i];
                var identifier = CSharpCodeHelpers.MakeIdentifier(commonMask.maskName);
                if(!commonMask.comment.IsNullOrWhiteSpace())
                {
                    writer.WriteLine($"private const string {identifier.ToUpperInvariant()}_COMMENT = @\"{commonMask.comment}\";");
                }
                writer.WriteLine($"public static readonly LayerMask {identifier} = {(int)commonMask.layerMask};");
            }
            writer.EndBlock();
        }
        private static (LayerMask, string)[] GetProjectLayers()
        {
            List<(LayerMask, string)> projectLayers = new List<(LayerMask, string)>();
            string[] layerNames = InternalEditorUtility.layers;
            foreach (string layerName in layerNames)
            {
                LayerMask mask = LayerMask.NameToLayer(layerName);
                projectLayers.Add((mask, layerName));
            }
            return projectLayers.ToArray();
        }
        public static bool GenerateWrapperCode(NebulaSettings.LayerIndexStructData data)
        {
            if (!Path.HasExtension(data.filePath))
                data.filePath += ".cs";

            var validationData = new CodeGeneratorValidator.ValidationData
            {
                code = WriteCode(data.commonMaskSelector, data.filePath, data.nameSpace),
                desiredPath = data.filePath
            };
            return CodeGeneratorValidator.Validate(validationData);
        }

    }
}
