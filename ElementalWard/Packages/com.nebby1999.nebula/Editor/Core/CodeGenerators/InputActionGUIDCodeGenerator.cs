using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;
using UnityEngine.InputSystem;

namespace Nebula.Editor
{
    internal static class InputActionGUIDCodeGenerator
    {
        private static string GenerateWrapperCode(InputActionAsset asset, string filePath, string nameSpace)
        {
            if (asset == null)
                throw new ArgumentNullException(nameof(asset));

            var sourceAssetPath = AssetDatabase.GetAssetPath(asset);
            var className = Path.GetFileNameWithoutExtension(filePath);

            var writer = new Writer()
            {
                buffer = new StringBuilder()
            };

            writer.WriteLine(CSharpCodeHelpers.MakeAutoGeneratedCodeHeader(
                "com.nebby1999.nebula:InputActionGUIDCodeGenerator", "1.0.0", sourceAssetPath));

            //usings
            writer.WriteLine("using System;");
            writer.WriteLine("using UnityEngine.InputSystem;");

            //namespace
            var haveNamespace = !string.IsNullOrEmpty(nameSpace);
            if (haveNamespace)
            {
                writer.WriteLine($"namespace {nameSpace}");
                writer.BeginBlock();
            }

            //Class Declaration
            writer.WriteLine($"public class {className}");
            writer.BeginBlock();

            //map structs
            var maps = asset.actionMaps;
            foreach (var map in maps)
            {
                var mapName = CSharpCodeHelpers.MakeIdentifier(map.name);
                writer.WriteLine($"// {map.name}");
                writer.WriteLine($"public static readonly Guid {mapName}GUID = Guid.Parse(\"{map.id}\");");
                writer.WriteLine($"public class {mapName}");
                writer.BeginBlock();
                //Action in maps
                foreach(var action in map.actions)
                {
                    var actionName = CSharpCodeHelpers.MakeIdentifier(action.name);
                    writer.WriteLine($"public static readonly Guid {actionName}GUID = Guid.Parse(\"{action.id}\");");
                }
                writer.WriteLine($"private {map.name}() {{}}");
                writer.EndBlock();
            }

            writer.WriteLine($"private {className}() {{}}");
            //end class
            writer.EndBlock();

            if (haveNamespace)
                writer.EndBlock();

            return writer.buffer.ToString();
        }

        public static bool GenerateWrapperCode(NebulaSettings.InputActionGUIDData data)
        {
            if (!Path.HasExtension(data.filePath))
                data.filePath += ".cs";

            // Generate code.
            var code = GenerateWrapperCode(data.inputActionAsset, data.filePath, data.nameSpace);

            // Check if the code changed. Don't write if it hasn't.
            if (File.Exists(data.filePath))
            {
                var existingCode = File.ReadAllText(data.filePath);
                if (existingCode == code || existingCode.WithAllWhitespaceStripped() == code.WithAllWhitespaceStripped())
                    return false;
            }

            // Write.
            CheckOut(data.filePath);
            File.WriteAllText(data.filePath, code);
            return true;
        }

        private static void CheckOut(string path)
        {
            if (string.IsNullOrEmpty(path))
                throw new ArgumentNullException(nameof(path));

            // Make path relative to project folder.
            var projectPath = Application.dataPath;
            if (path.StartsWith(projectPath) && path.Length > projectPath.Length &&
                (path[projectPath.Length] == '/' || path[projectPath.Length] == '\\'))
                path = path.Substring(0, projectPath.Length + 1);

            AssetDatabase.MakeEditable(path);
        }
        private static string WithAllWhitespaceStripped(this string str)
        {
            var buffer = new StringBuilder();
            foreach (var ch in str)
                if (!char.IsWhiteSpace(ch))
                    buffer.Append(ch);
            return buffer.ToString();
        }
        internal struct Writer
        {
            public StringBuilder buffer;
            public int indentLevel;

            public void BeginBlock()
            {
                WriteIndent();
                buffer.Append("{\n");
                ++indentLevel;
            }

            public void EndBlock()
            {
                --indentLevel;
                WriteIndent();
                buffer.Append("}\n");
            }

            public void WriteLine()
            {
                buffer.Append('\n');
            }

            public void WriteLine(string text)
            {
                if (!text.All(char.IsWhiteSpace))
                {
                    WriteIndent();
                    buffer.Append(text);
                }
                buffer.Append('\n');
            }

            public void Write(string text)
            {
                buffer.Append(text);
            }

            public void WriteIndent()
            {
                for (var i = 0; i < indentLevel; ++i)
                {
                    for (var n = 0; n < 4; ++n)
                        buffer.Append(' ');
                }
            }
        }
    }
    
    internal class Processor : AssetPostprocessor
    {
        static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths, bool didDomainReload)
        {
            NebulaSettings settings = NebulaSettings.instance;
            if (!settings)
                return;

            var collection = settings.inputActionGUIDs;
            for(int i = 0; i < collection.Length; i++)
            {
                var entry = collection[i];
                var assetPath = AssetDatabase.GetAssetPath(entry.inputActionAsset);
                if(!importedAssets.Contains(assetPath))
                    continue;

                InputActionGUIDCodeGenerator.GenerateWrapperCode(entry);
            }

            return;
        }
    }
}