//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.nebby1999.nebula:LayerIndexCodeGenerator
//     version 1.0.0
//     from Project Settings
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using UnityEngine;
namespace ElementalWard
{
    public struct LayerIndex
    {
        public static class CommonMasks
        {
            private const string BULLET_COMMENT = @"Combination of World and EntityPrecise";
            ///<summary>
            ///Combination of World and EntityPrecise
            ///</summary>
            public static readonly LayerMask Bullet = 72;
        }
        public int IntVal { get => _intVal; private set => _intVal = value; }
        private int _intVal;
        public LayerMask Mask => (IntVal >= 0) ? (1 << IntVal) : IntVal;
        public LayerMask CollisionMask => _collisionMasks[IntVal];
        private static uint _assignedLayerMask;
        public static readonly LayerIndex invalidLayer = new LayerIndex(-1);
        public static readonly LayerIndex @default = GetLayerIndex("Default");
        public static readonly LayerIndex transparentFX = GetLayerIndex("TransparentFX");
        public static readonly LayerIndex ignoreRaycast = GetLayerIndex("Ignore Raycast");
        public static readonly LayerIndex world = GetLayerIndex("World");
        public static readonly LayerIndex water = GetLayerIndex("Water");
        public static readonly LayerIndex uI = GetLayerIndex("UI");
        public static readonly LayerIndex entityPrecise = GetLayerIndex("EntityPrecise");
        public static readonly LayerIndex projectile = GetLayerIndex("Projectile");
        public static readonly LayerIndex decoration = GetLayerIndex("Decoration");
        public static readonly LayerIndex body = GetLayerIndex("Body");
        private static readonly LayerMask[] _collisionMasks = CalcCollisionMasks();
        private static LayerIndex GetLayerIndex(string layerName)
        {
            LayerIndex layerIndex = default(LayerIndex);
            layerIndex._intVal = LayerMask.NameToLayer(layerName);
            LayerIndex result = layerIndex;
            if (result.IntVal == invalidLayer.IntVal)
            {
                Debug.LogErrorFormat("Layer \"{0}\" is not defined in this project's \"Tags and Layers\" settings.", layerName);
            }
            else
            {
                _assignedLayerMask |= (uint)(1 << result.IntVal);
            }
            return layerIndex;
        }
        private static LayerMask[] CalcCollisionMasks()
        {
            LayerMask[] array = new LayerMask[32];
            for (int i = 0; i < 32; i++)
            {
                LayerMask layerMask = default(LayerMask);
                for (int j = 0; j < 32; j++)
                {
                    if (!Physics.GetIgnoreLayerCollision(i, j))
                    {
                        layerMask = (int)layerMask | (i << j);
                    }
                }
                array[i] = layerMask;
            }
            return array;
        }
        private LayerIndex(int val)
        {
            _intVal = val;
        }
    }
}
